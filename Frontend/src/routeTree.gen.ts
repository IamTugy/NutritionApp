/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as TrainersRouteImport } from './routes/trainers/route'
import { Route as NutritionRouteImport } from './routes/nutrition/route'
import { Route as MealBuilderRouteImport } from './routes/meal-builder/route'
import { Route as GoalsRouteImport } from './routes/goals/route'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const TrainersRouteRoute = TrainersRouteImport.update({
  id: '/trainers',
  path: '/trainers',
  getParentRoute: () => rootRoute,
} as any)

const NutritionRouteRoute = NutritionRouteImport.update({
  id: '/nutrition',
  path: '/nutrition',
  getParentRoute: () => rootRoute,
} as any)

const MealBuilderRouteRoute = MealBuilderRouteImport.update({
  id: '/meal-builder',
  path: '/meal-builder',
  getParentRoute: () => rootRoute,
} as any)

const GoalsRouteRoute = GoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/goals': {
      id: '/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsRouteImport
      parentRoute: typeof rootRoute
    }
    '/meal-builder': {
      id: '/meal-builder'
      path: '/meal-builder'
      fullPath: '/meal-builder'
      preLoaderRoute: typeof MealBuilderRouteImport
      parentRoute: typeof rootRoute
    }
    '/nutrition': {
      id: '/nutrition'
      path: '/nutrition'
      fullPath: '/nutrition'
      preLoaderRoute: typeof NutritionRouteImport
      parentRoute: typeof rootRoute
    }
    '/trainers': {
      id: '/trainers'
      path: '/trainers'
      fullPath: '/trainers'
      preLoaderRoute: typeof TrainersRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRoute
  '/goals': typeof GoalsRouteRoute
  '/meal-builder': typeof MealBuilderRouteRoute
  '/nutrition': typeof NutritionRouteRoute
  '/trainers': typeof TrainersRouteRoute
  '/login': typeof LoginRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRoute
  '/goals': typeof GoalsRouteRoute
  '/meal-builder': typeof MealBuilderRouteRoute
  '/nutrition': typeof NutritionRouteRoute
  '/trainers': typeof TrainersRouteRoute
  '/login': typeof LoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRoute
  '/goals': typeof GoalsRouteRoute
  '/meal-builder': typeof MealBuilderRouteRoute
  '/nutrition': typeof NutritionRouteRoute
  '/trainers': typeof TrainersRouteRoute
  '/login': typeof LoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/goals'
    | '/meal-builder'
    | '/nutrition'
    | '/trainers'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/goals'
    | '/meal-builder'
    | '/nutrition'
    | '/trainers'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/goals'
    | '/meal-builder'
    | '/nutrition'
    | '/trainers'
    | '/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRoute
  GoalsRouteRoute: typeof GoalsRouteRoute
  MealBuilderRouteRoute: typeof MealBuilderRouteRoute
  NutritionRouteRoute: typeof NutritionRouteRoute
  TrainersRouteRoute: typeof TrainersRouteRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRoute,
  GoalsRouteRoute: GoalsRouteRoute,
  MealBuilderRouteRoute: MealBuilderRouteRoute,
  NutritionRouteRoute: NutritionRouteRoute,
  TrainersRouteRoute: TrainersRouteRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/goals",
        "/meal-builder",
        "/nutrition",
        "/trainers",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx"
    },
    "/goals": {
      "filePath": "goals/route.tsx"
    },
    "/meal-builder": {
      "filePath": "meal-builder/route.tsx"
    },
    "/nutrition": {
      "filePath": "nutrition/route.tsx"
    },
    "/trainers": {
      "filePath": "trainers/route.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
