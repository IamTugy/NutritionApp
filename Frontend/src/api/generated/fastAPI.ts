/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  GetNutritionUsersUserIdNutritionsGetParams,
  Goals,
  GoalsCreate,
  HTTPValidationError,
  NutritionItem,
  NutritionSnapshot,
  NutritionSnapshotCreate,
  SearchFoodSearchGetParams,
} from './model'

import { customInstance } from '../mutator/custom-instance'
import type { ErrorType } from '../mutator/custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Basic root endpoint to verify if the app is running.
 * @summary Read Root
 */
export const readRootGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({ url: `/`, method: 'GET', signal }, options)
}

export const getReadRootGetQueryKey = () => {
  return [`/`] as const
}

export const getReadRootGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getReadRootGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({
    signal,
  }) => readRootGet(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof readRootGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadRootGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readRootGet>>
>
export type ReadRootGetQueryError = ErrorType<unknown>

export function useReadRootGet<
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          Awaited<ReturnType<typeof readRootGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useReadRootGet<
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          Awaited<ReturnType<typeof readRootGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useReadRootGet<
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Read Root
 */

export function useReadRootGet<
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getReadRootGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Searches for a food by name.
 * @summary Search Food
 */
export const searchFoodSearchGet = (
  params: SearchFoodSearchGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NutritionItem[]>(
    { url: `/search`, method: 'GET', params, signal },
    options,
  )
}

export const getSearchFoodSearchGetQueryKey = (
  params: SearchFoodSearchGetParams,
) => {
  return [`/search`, ...(params ? [params] : [])] as const
}

export const getSearchFoodSearchGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchFoodSearchGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchFoodSearchGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchFoodSearchGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getSearchFoodSearchGetQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchFoodSearchGet>>
  > = ({ signal }) => searchFoodSearchGet(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchFoodSearchGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchFoodSearchGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchFoodSearchGet>>
>
export type SearchFoodSearchGetQueryError = ErrorType<HTTPValidationError>

export function useSearchFoodSearchGet<
  TData = Awaited<ReturnType<typeof searchFoodSearchGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchFoodSearchGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchFoodSearchGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchFoodSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchFoodSearchGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSearchFoodSearchGet<
  TData = Awaited<ReturnType<typeof searchFoodSearchGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchFoodSearchGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchFoodSearchGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchFoodSearchGet>>,
          TError,
          Awaited<ReturnType<typeof searchFoodSearchGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useSearchFoodSearchGet<
  TData = Awaited<ReturnType<typeof searchFoodSearchGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchFoodSearchGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchFoodSearchGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Search Food
 */

export function useSearchFoodSearchGet<
  TData = Awaited<ReturnType<typeof searchFoodSearchGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: SearchFoodSearchGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchFoodSearchGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getSearchFoodSearchGetQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Fetches nutrition snapshots for a user between a date range.
 * @summary Get Nutrition
 */
export const getNutritionUsersUserIdNutritionsGet = (
  userId: string,
  params?: GetNutritionUsersUserIdNutritionsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NutritionSnapshot[]>(
    { url: `/users/${userId}/nutritions`, method: 'GET', params, signal },
    options,
  )
}

export const getGetNutritionUsersUserIdNutritionsGetQueryKey = (
  userId: string,
  params?: GetNutritionUsersUserIdNutritionsGetParams,
) => {
  return [`/users/${userId}/nutritions`, ...(params ? [params] : [])] as const
}

export const getGetNutritionUsersUserIdNutritionsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  params?: GetNutritionUsersUserIdNutritionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getGetNutritionUsersUserIdNutritionsGetQueryKey(userId, params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>
  > = ({ signal }) =>
    getNutritionUsersUserIdNutritionsGet(userId, params, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNutritionUsersUserIdNutritionsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>
>
export type GetNutritionUsersUserIdNutritionsGetQueryError =
  ErrorType<HTTPValidationError>

export function useGetNutritionUsersUserIdNutritionsGet<
  TData = Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  params: undefined | GetNutritionUsersUserIdNutritionsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
          TError,
          Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetNutritionUsersUserIdNutritionsGet<
  TData = Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  params?: GetNutritionUsersUserIdNutritionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
          TError,
          Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetNutritionUsersUserIdNutritionsGet<
  TData = Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  params?: GetNutritionUsersUserIdNutritionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Nutrition
 */

export function useGetNutritionUsersUserIdNutritionsGet<
  TData = Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  params?: GetNutritionUsersUserIdNutritionsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNutritionUsersUserIdNutritionsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetNutritionUsersUserIdNutritionsGetQueryOptions(
    userId,
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Creates a nutrition snapshot for a user.
 * @summary Create Nutrition
 */
export const createNutritionUserUserIdNutritionsPost = (
  userId: string,
  nutritionSnapshotCreate: NutritionSnapshotCreate,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NutritionSnapshot>(
    {
      url: `/user/${userId}/nutritions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: nutritionSnapshotCreate,
      signal,
    },
    options,
  )
}

export const getCreateNutritionUserUserIdNutritionsPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNutritionUserUserIdNutritionsPost>>,
    TError,
    { userId: string; data: NutritionSnapshotCreate },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNutritionUserUserIdNutritionsPost>>,
  TError,
  { userId: string; data: NutritionSnapshotCreate },
  TContext
> => {
  const mutationKey = ['createNutritionUserUserIdNutritionsPost']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNutritionUserUserIdNutritionsPost>>,
    { userId: string; data: NutritionSnapshotCreate }
  > = (props) => {
    const { userId, data } = props ?? {}

    return createNutritionUserUserIdNutritionsPost(userId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateNutritionUserUserIdNutritionsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNutritionUserUserIdNutritionsPost>>
>
export type CreateNutritionUserUserIdNutritionsPostMutationBody =
  NutritionSnapshotCreate
export type CreateNutritionUserUserIdNutritionsPostMutationError =
  ErrorType<HTTPValidationError>

/**
 * @summary Create Nutrition
 */
export const useCreateNutritionUserUserIdNutritionsPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createNutritionUserUserIdNutritionsPost>>,
      TError,
      { userId: string; data: NutritionSnapshotCreate },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createNutritionUserUserIdNutritionsPost>>,
  TError,
  { userId: string; data: NutritionSnapshotCreate },
  TContext
> => {
  const mutationOptions =
    getCreateNutritionUserUserIdNutritionsPostMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Fetches a specific nutrition snapshot by its ID.
 * @summary Get Nutrition By Id
 */
export const getNutritionByIdUsersUserIdNutritionsNutritionIdGet = (
  userId: string,
  nutritionId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NutritionSnapshot>(
    {
      url: `/users/${userId}/nutritions/${nutritionId}`,
      method: 'GET',
      signal,
    },
    options,
  )
}

export const getGetNutritionByIdUsersUserIdNutritionsNutritionIdGetQueryKey = (
  userId: string,
  nutritionId: string,
) => {
  return [`/users/${userId}/nutritions/${nutritionId}`] as const
}

export const getGetNutritionByIdUsersUserIdNutritionsNutritionIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
    >,
    TError = ErrorType<HTTPValidationError>,
  >(
    userId: string,
    nutritionId: string,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet
            >
          >,
          TError,
          TData
        >
      >
      request?: SecondParameter<typeof customInstance>
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {}

    const queryKey =
      queryOptions?.queryKey ??
      getGetNutritionByIdUsersUserIdNutritionsNutritionIdGetQueryKey(
        userId,
        nutritionId,
      )

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
      >
    > = ({ signal }) =>
      getNutritionByIdUsersUserIdNutritionsNutritionIdGet(
        userId,
        nutritionId,
        requestOptions,
        signal,
      )

    return {
      queryKey,
      queryFn,
      enabled: !!(userId && nutritionId),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
      >,
      TError,
      TData
    > & { queryKey: DataTag<QueryKey, TData, TError> }
  }

export type GetNutritionByIdUsersUserIdNutritionsNutritionIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
    >
  >
export type GetNutritionByIdUsersUserIdNutritionsNutritionIdGetQueryError =
  ErrorType<HTTPValidationError>

export function useGetNutritionByIdUsersUserIdNutritionsNutritionIdGet<
  TData = Awaited<
    ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
  >,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  nutritionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet
            >
          >
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetNutritionByIdUsersUserIdNutritionsNutritionIdGet<
  TData = Awaited<
    ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
  >,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  nutritionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<
              typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet
            >
          >,
          TError,
          Awaited<
            ReturnType<
              typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet
            >
          >
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetNutritionByIdUsersUserIdNutritionsNutritionIdGet<
  TData = Awaited<
    ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
  >,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  nutritionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Nutrition By Id
 */

export function useGetNutritionByIdUsersUserIdNutritionsNutritionIdGet<
  TData = Awaited<
    ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
  >,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  nutritionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof getNutritionByIdUsersUserIdNutritionsNutritionIdGet>
        >,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions =
    getGetNutritionByIdUsersUserIdNutritionsNutritionIdGetQueryOptions(
      userId,
      nutritionId,
      options,
    )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Deletes a nutrition snapshot for a user by its ID.
 * @summary Delete Nutrition
 */
export const deleteNutritionUserUserIdNutritionsNutritionIdDelete = (
  userId: string,
  nutritionId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<NutritionSnapshot>(
    { url: `/user/${userId}/nutritions/${nutritionId}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteNutritionUserUserIdNutritionsNutritionIdDeleteMutationOptions =
  <TError = ErrorType<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteNutritionUserUserIdNutritionsNutritionIdDelete>
      >,
      TError,
      { userId: string; nutritionId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof deleteNutritionUserUserIdNutritionsNutritionIdDelete>
    >,
    TError,
    { userId: string; nutritionId: string },
    TContext
  > => {
    const mutationKey = ['deleteNutritionUserUserIdNutritionsNutritionIdDelete']
    const { mutation: mutationOptions, request: requestOptions } = options
      ? options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, request: undefined }

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof deleteNutritionUserUserIdNutritionsNutritionIdDelete>
      >,
      { userId: string; nutritionId: string }
    > = (props) => {
      const { userId, nutritionId } = props ?? {}

      return deleteNutritionUserUserIdNutritionsNutritionIdDelete(
        userId,
        nutritionId,
        requestOptions,
      )
    }

    return { mutationFn, ...mutationOptions }
  }

export type DeleteNutritionUserUserIdNutritionsNutritionIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteNutritionUserUserIdNutritionsNutritionIdDelete>
    >
  >

export type DeleteNutritionUserUserIdNutritionsNutritionIdDeleteMutationError =
  ErrorType<HTTPValidationError>

/**
 * @summary Delete Nutrition
 */
export const useDeleteNutritionUserUserIdNutritionsNutritionIdDelete = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof deleteNutritionUserUserIdNutritionsNutritionIdDelete>
      >,
      TError,
      { userId: string; nutritionId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<
    ReturnType<typeof deleteNutritionUserUserIdNutritionsNutritionIdDelete>
  >,
  TError,
  { userId: string; nutritionId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteNutritionUserUserIdNutritionsNutritionIdDeleteMutationOptions(
      options,
    )

  return useMutation(mutationOptions, queryClient)
}

/**
 * Fetches the goals for a specific user.
 * @summary Get Goals
 */
export const getGoalsUserUserIdGoalsGet = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Goals>(
    { url: `/user/${userId}/goals`, method: 'GET', signal },
    options,
  )
}

export const getGetGoalsUserUserIdGoalsGetQueryKey = (userId: string) => {
  return [`/user/${userId}/goals`] as const
}

export const getGetGoalsUserUserIdGoalsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetGoalsUserUserIdGoalsGetQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>
  > = ({ signal }) => getGoalsUserUserIdGoalsGet(userId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetGoalsUserUserIdGoalsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>
>
export type GetGoalsUserUserIdGoalsGetQueryError =
  ErrorType<HTTPValidationError>

export function useGetGoalsUserUserIdGoalsGet<
  TData = Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
          TError,
          Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetGoalsUserUserIdGoalsGet<
  TData = Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
          TError,
          Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetGoalsUserUserIdGoalsGet<
  TData = Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Goals
 */

export function useGetGoalsUserUserIdGoalsGet<
  TData = Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoalsUserUserIdGoalsGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetGoalsUserUserIdGoalsGetQueryOptions(
    userId,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Updates the goals for a specific user.
 * @summary Update Goals
 */
export const updateGoalsUserUserIdGoalsPut = (
  userId: string,
  goalsCreate: GoalsCreate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Goals>(
    {
      url: `/user/${userId}/goals`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: goalsCreate,
    },
    options,
  )
}

export const getUpdateGoalsUserUserIdGoalsPutMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGoalsUserUserIdGoalsPut>>,
    TError,
    { userId: string; data: GoalsCreate },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateGoalsUserUserIdGoalsPut>>,
  TError,
  { userId: string; data: GoalsCreate },
  TContext
> => {
  const mutationKey = ['updateGoalsUserUserIdGoalsPut']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateGoalsUserUserIdGoalsPut>>,
    { userId: string; data: GoalsCreate }
  > = (props) => {
    const { userId, data } = props ?? {}

    return updateGoalsUserUserIdGoalsPut(userId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateGoalsUserUserIdGoalsPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGoalsUserUserIdGoalsPut>>
>
export type UpdateGoalsUserUserIdGoalsPutMutationBody = GoalsCreate
export type UpdateGoalsUserUserIdGoalsPutMutationError =
  ErrorType<HTTPValidationError>

/**
 * @summary Update Goals
 */
export const useUpdateGoalsUserUserIdGoalsPut = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateGoalsUserUserIdGoalsPut>>,
      TError,
      { userId: string; data: GoalsCreate },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateGoalsUserUserIdGoalsPut>>,
  TError,
  { userId: string; data: GoalsCreate },
  TContext
> => {
  const mutationOptions =
    getUpdateGoalsUserUserIdGoalsPutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
